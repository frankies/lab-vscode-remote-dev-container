plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0-M3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.graalvm.buildtools.native' version '0.10.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}


task generateLockfile {
  doLast {
    def allRuntimeDependencies = [:]  // map used for deduplication
    subprojects.each { subproject ->
      subproject.configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactId = artifact.id.componentIdentifier.toString()
        if (!artifactId.startsWith("project :")) { // exclude project dependencies
          allRuntimeDependencies.put(artifactId, artifact)
        }
      }
    }
    // write lockfile
    def depList = allRuntimeDependencies.collect { artifactId, artifact -> artifactId }.sort()
    new File(rootProject.buildDir, "gradle.lockfile").withWriter { w ->
      w << "# This file is generated by build.gradle and contains all dependencies from all subprojects\n"
      w << "# It can be used by trivy to scan for vulnerabilities: trivy fs ./gradle.lockfile\n"
      depList.each { dependency ->
        w << "${dependency}=runtimeClasspath\n"
      }
    }
  }
}